{"version":3,"sources":["components/Dashboard.js","components/Form.js","components/NewPet.js","components/PetDetail.js","components/EditPet.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","useState","pets","setPets","loaded","setLoaded","useEffect","axios","get","then","res","data","sort","a","b","type","catch","err","console","log","to","name","map","pet","idx","key","_id","Form","props","errors","handleChange","action","htmlFor","onChange","value","message","description","skill1","skill2","skill3","NewPet","style","skills1","skills2","skills3","setPet","setErrors","onSubmit","e","preventDefault","post","navigate","target","PetDetail","id","onClick","delete","EditPet","patch","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d4c51327.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { Link } from '@reach/router';\n\nconst Dashboard = () => {\n    const [ pets, setPets ] = useState([])\n    const [ loaded, setLoaded ] = useState(false)\n\n    useEffect(() => {\n        axios.get(\"http://localhost:8000/api/pets\")\n            .then(res => {\n                setPets(res.data);\n                setLoaded(true)\n            })\n            .then(pets.sort((a, b) => a.type - b.type))\n            .catch(err => console.log(err))\n    }, [])\n\n    return (\n        <>\n            <h3>These pets are looking for a good home</h3>\n            <Link to=\"/new\">Add new pet to the shelter</Link>\n            {\n                loaded &&\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Pet Name</th>\n                            <th>Pet Type</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            pets.sort((a, b) => a.name - b.name).map((pet, idx) => {\n                                return (\n                                    <tr key={idx}>\n                                        <td>{ pet.name }</td>\n                                        <td>{ pet.type }</td>\n                                        <td>\n                                            <Link to={`/pet/${pet._id}`}>Details</Link>\n                                            |\n                                            <Link to={`/pet/${pet._id}/edit`}>Edit</Link>\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                </table>\n            }\n        </>\n    )\n}\n\nexport default Dashboard\n","import { navigate } from '@reach/router'\nimport React from 'react'\n\nconst Form = (props) => {\n    const { pet, errors, handleChange, action } = props;\n    return (\n        <>\n            <div>\n                <label htmlFor=\"name\">Pet Name: </label>\n                <input type=\"text\" name=\"name\" onChange={ handleChange } value={ pet.name }/>\n                {\n                    errors.name ?\n                    <p>{errors.name.message}</p>\n                    :\n                    ''\n                }\n            </div>\n            <div>\n                <label htmlFor=\"type\">Pet Type: </label>\n                <input type=\"text\" name=\"type\" onChange={ handleChange } value={ pet.type }/>\n                {\n                    errors.type ?\n                    <p>{errors.type.message}</p>\n                    :\n                    ''\n                }\n            </div>\n            <div>\n                <label htmlFor=\"description\">Pet Description: </label>\n                <input type=\"text\" name=\"description\" onChange={ handleChange } value={ pet.description }/>\n                {\n                    errors.description ?\n                    <p>{errors.description.message}</p>\n                    :\n                    ''\n                }\n            </div>\n            <hr/>\n            <h3>Skills (Optional)</h3>\n            <div>\n                <label htmlFor=\"skill1\">Skill 1</label>\n                <input type=\"text\" name=\"skill1\" onChange={ handleChange } value={ pet.skill1 }/>\n            </div>\n            <div>\n                <label htmlFor=\"skill2\">Skill 2</label>\n                <input type=\"text\" name=\"skill2\" onChange={ handleChange } value={ pet.skill2 }/>\n            </div>\n            <div>\n                <label htmlFor=\"skill3\">Skill 3</label>\n                <input type=\"text\" name=\"skill3\" onChange={ handleChange } value={ pet.skill3 }/>\n            </div>\n            {\n                action === \"create\" ?\n                <button type=\"submit\">Add Pet</button>\n                :\n                <button type=\"submit\">Edit Pet</button>\n\n            }\n        </>\n    )\n}\n\nexport default Form\n","import React, { useState } from 'react';\nimport Form from './Form';\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\n\nconst NewPet = () => {\n    const [ pet, setPet ] = useState({\n        name: '',\n        style: '',\n        description: '',\n        skills1: '',\n        skills2: '',\n        skills3: ''\n    })\n\n    const [errors, setErrors] = useState({});\n\n    const handleChange = e => {\n        setPet({\n            ...pet,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        axios.post(\"http://localhost:8000/api/pets\", pet)\n            .then(res => {\n                if(res.data.errors){\n                    setErrors(res.data.errors)\n                } else {\n                    navigate(\"/\")\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    return (\n        <>\n            <Link to=\"/\">Back to Main</Link>\n            <h3>Add New Pet</h3>\n            <form onSubmit={ handleSubmit }>\n                <Form pet={pet} errors={errors} handleChange={handleChange} action=\"create\" />\n            </form>\n        </>\n    )\n}\n\nexport default NewPet\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\nconst PetDetail = props => {\n    const { id } = props;\n    const [ pet, setPet ] = useState({})\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/pets/${id}`)\n            .then(res => {\n                if(res.data == null){\n                    navigate(\"/\")\n                }\n                setPet(res.data)\n            })\n            .catch(err => console.log(err))\n    })\n\n    const deleteHandler = () => {\n        axios.delete(`http://localhost:8000/api/pets/${id}`)\n            .then(navigate(\"/\"))\n            .catch(err => console.log(err))\n    }\n\n    return (\n        <>\n            <Link to=\"/\">Back to Main</Link>\n            <h2>Details about: {pet.name}</h2>\n            <button onClick={ deleteHandler }>Adopt {pet.name}</button>\n            <div>\n                <h3>Pet type: <span>{pet.type}</span></h3>\n                <h3>Description: <span>{pet.type}</span></h3>\n                <h3>\n                    Skills:\n                    <ul>\n                        <li>{pet.skill1}</li>\n                        <li>{pet.skill2}</li>\n                        <li>{pet.skill3}</li>\n                    </ul>\n                </h3>\n                \n            </div>\n        </>\n    )\n}\n\nexport default PetDetail\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\nimport Form from './Form';\n\nconst EditPet = props => {\n    const { id } = props;\n    const [ pet, setPet ] = useState({\n        name: '',\n        style: '',\n        description: '',\n        skills1: '',\n        skills2: '',\n        skills3: ''\n    })\n    const [ errors, setErrors ] = useState({});\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/pets/${id}`)\n            .then(res => {\n                if(res.data == null){\n                    navigate(\"/\")\n                } else {\n                    setPet(res.data)\n                }\n            })\n            .catch(err => console.log(err))\n    }, [])\n\n    const handleChange = e => {\n        setPet({\n            ...pet,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        axios.patch(`http://localhost:8000/api/pets/${id}`, pet)\n            .then(res => {\n                if(res.data.errors){\n                    setErrors(res.data.errors)\n                } else {\n                    navigate(\"/\")\n                }\n            })\n            .catch(err => console.log(err))\n    }\n\n\n    return (\n        <>\n            <Link to=\"/\">Back to Main</Link>\n            <h3>Edit this pet</h3>\n            <form onSubmit={handleSubmit} >\n                <Form pet={pet} errors={errors} handleChange={handleChange} action=\"edit\" />\n            </form>\n        </>\n    )\n}\n\nexport default EditPet\n","import React from 'react';\nimport './App.css';\nimport { Router } from '@reach/router';\nimport Dashboard from './components/Dashboard';\nimport NewPet from './components/NewPet';\nimport PetDetail from './components/PetDetail';\nimport EditPet from './components/EditPet';\n\nfunction App() {\n  return (\n    <>\n      <h1>Pet Shelter</h1>\n      <Router>\n        <Dashboard path=\"/\"/>\n        <NewPet path=\"/new\" />\n        <PetDetail path=\"/pet/:id\" />\n        <EditPet path=\"/pet/:id/edit\" />\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}